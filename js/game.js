// Generated by CoffeeScript 1.6.2
(function() {
  var $content, $garden, $player, $toolbar, BREAKFAST, DAY_LENGTH, DINNER, LUNCH, phaseTimes, phases, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.models = {};

  window.collections = {};

  window.views = {};

  $player = $('#player');

  $content = $('#content');

  $garden = $('#garden');

  $toolbar = $('#toolbar');

  DAY_LENGTH = 24;

  BREAKFAST = DAY_LENGTH * .3;

  LUNCH = DAY_LENGTH * .5;

  DINNER = DAY_LENGTH * .8;

  models.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      _ref = Player.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Player.prototype.defaults = {
      health: 10,
      maxHealth: 10,
      calories: 6,
      maxCalories: 6,
      status: {},
      luck: 5,
      fed: 80,
      maxFed: 100,
      ate: 0
    };

    Player.prototype.initialize = function() {
      console.log('model Player init');
      this.inventory = new collections.Inventory();
      this.listenTo(time, 'change:hours', this.onStep);
      this.listenTo(time, 'dawn', this.onDay);
      this.on('change:fed', this.onFedChange);
      this.view = new views.Player({
        model: this
      });
      return this.view.render();
    };

    Player.prototype.onStep = function() {
      return this.set({
        fed: this.get('fed') - 1
      });
    };

    Player.prototype.onFedChange = function() {
      if (this.get('fed') === 0) {
        return game.envokeEvent('hungry');
      }
    };

    Player.prototype.onDay = function() {
      var status;

      status = this.get('status');
      if (status.exhausted) {
        this.set({
          calories: Math.floor(Math.max(this.get('maxCalories') + this.get('calories'), 2))
        });
        game.message("You're still wiped from yesterday, better take it easy today.", "warning");
        return status.exhausted = false;
      } else {
        this.set({
          calories: this.get('maxCalories')
        });
        return game.message("I feel a lot better today");
      }
    };

    Player.prototype.burnCalories = function(calories) {
      var msg, newCals;

      msg = this.get('calories') > 0 ? "This requires " + calories + " calories and I only have " + (this.get('calories')) + ". Should I cowboy up?" : msg = "This requires " + calories + " calories and I'm exhausted. Should I cowboy up?";
      if (this.get('calories') - calories >= 0 || confirm(msg)) {
        newCals = this.get('calories') - calories;
        this.set({
          calories: newCals
        });
        if (newCals === 0) {
          game.envokeEvent('tired');
        }
        return true;
      }
      return false;
    };

    Player.prototype.work = function(hours) {
      var dmg;

      if (hours == null) {
        hours = 1;
      }
      time.addTime(hours);
      if (this.get('calories') < 0) {
        this.get('status').exhausted = true;
        dmg = Math.abs(this.get('calories')) ^ 2;
        this.set({
          health: this.get('health') - dmg
        });
        game.message("Working while exhausted cost you " + dmg + " health", 'critical');
      }
      if (this.fed === 0) {
        this.set({
          calories: this.get('calories') - 1
        });
      }
      if (this.get('health') <= 0) {
        return game.envokeEvent('death');
      }
    };

    return Player;

  })(Backbone.Model);

  views.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      _ref1 = Player.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Player.prototype.el = $('#player');

    Player.prototype.initialize = function() {
      console.log('view Player init');
      this.listenTo(time, 'change:hours', this.render);
      return this.model.on('change', this.render.bind(this));
    };

    Player.prototype.render = function() {
      console.log('render player');
      return $(this.el).html(this.template(this.model));
    };

    Player.prototype.template = _.template("<div>\n	<%=time.get('hours')%>:00 Day<%=time.get('day')%>\n</div>\n<div id=\"status\">\n	<%for(var i=0,len=this.get('status').length;i<len;i++){%>\n		<span><%=this.get('status')[i]%></span>\n	<%}%>\n</div>\n<%=game.meterTemplate({name: \"calories: \"+this.get('calories')+\"/\"+this.get('maxCalories'), value: this.get('calories') / this.get('maxCalories') , bg: \"hsl(90,70%,40%)\" })%>\n<%=game.meterTemplate({name: \"health: \"+this.get('health')+\"/\"+this.get('maxHealth'), value: this.get('health') / this.get('maxHealth') , bg: \"hsl(0,70%,40%)\" })%>\n<div class=\"eat action\" data-action=\"eat\" title=\"Eat\">\n	<%=game.meterTemplate({name: \"Fed: \"+this.get('fed')+\"/\"+this.get('maxFed'), value: this.get('fed') / this.get('maxFed'), bg: \"orange\"})%>\n</div>\n");

    return Player;

  })(Backbone.View);

  phases = {
    'midnight': 0,
    'dawn': 6,
    'midday': 12,
    'dusk': 18,
    'night': 21
  };

  phaseTimes = _.invert(phases);

  models.Time = (function(_super) {
    __extends(Time, _super);

    function Time() {
      _ref2 = Time.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Time.prototype.defaults = {
      hours: 6,
      previousTime: 0,
      day: 1
    };

    Time.prototype.sleep = function() {
      var _results;

      _results = [];
      while (this.get('hours') !== phases.dawn) {
        _results.push(this.step());
      }
      return _results;
    };

    Time.prototype.addTime = function(h) {
      var _results;

      _results = [];
      while (h) {
        this.step();
        _results.push(h -= 1);
      }
      return _results;
    };

    Time.prototype.step = function() {
      var hours;

      hours = this.get('hours') + 1;
      if (hours === DAY_LENGTH) {
        this.set({
          day: this.get('day') + 1
        });
        hours = 0;
      }
      this.set({
        hours: hours
      });
      if (phaseTimes[hours]) {
        return this.trigger(phaseTimes[hours]);
      }
    };

    return Time;

  })(Backbone.Model);

  models.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref3 = Game.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Game.prototype.defaults = {
      food: 90,
      weather: 5
    };

    Game.prototype.start = function() {
      console.log('model Game init');
      window.time = new models.Time;
      this.player = new models.Player;
      window.player = this.player;
      this.field = new Backbone.Collection;
      new views.Game({
        model: this
      });
      this.listenTo(time, phases.dawn, this.beforeDay);
      return this.envokeEvent('intro');
    };

    Game.prototype.message = function(msg, className) {
      className || (className = '');
      $content.append("<div class=\"" + className + "\">" + msg + "</div>");
      return $content.animate({
        scrollTop: $content[0].scrollHeight
      }, 500);
    };

    Game.prototype.envokeEvent = function(k, data) {
      data || (data = {});
      if (!window.events[k]) {
        this.message("Action " + k + " not defined");
      } else if (window.events[k].call(this, data)) {
        log("Event: " + k + " evoked");
        return true;
      }
      return false;
    };

    Game.prototype.burnCalories = function(calories) {
      var msg;

      msg = this.player.calories > 0 ? "This requires " + calories + " calories and I only have " + this.player.calories + ". Should I cowboy up?" : msg = "This requires " + calories + " calories and I'm exhausted. Should I cowboy up?";
      if (this.player.calories - calories >= 0 || confirm(msg)) {
        this.player.calories -= calories;
        return true;
      }
      return false;
    };

    Game.prototype.meterTemplate = _.template("<% var meterWidth = this.width || 150, meterHeight = this.height || 25;%>\n<div class=\"meter\" style=\"width: <%=meterWidth%>px; height: <%=meterHeight%>px\">\n	<em style=\"line-height: <%=meterHeight%>px; width: <%=meterWidth%>\"><%=name%></em>\n	<span style=\"height: <%=meterHeight%>px; <%if(this.bg){%>background-color: <%=bg%>;<%}%>width: <%=value*meterWidth%>px\"></span>\n</div>");

    return Game;

  })(Backbone.Model);

  views.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref4 = Game.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Game.prototype.initialize = function() {
      console.log('view Game init');
      return this.fieldView = new views.Field({
        collection: this.model.field
      });
    };

    Game.prototype.render = function() {
      return this;
    };

    return Game;

  })(Backbone.View);

  $(function() {
    window.game = new models.Game;
    return game.start();
  });

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
